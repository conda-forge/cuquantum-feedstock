{% set package = "cuquantum" %}
# Make sure the component versions are consistent with the SDK version!
{% set version = "25.09.0.7" %}
{% set cudm_version = "0.3.0" %}
{% set cusv_version = "1.10.0" %}
{% set cutn_version = "2.9.0" %}

{% set sdk_version = version.split(".") %}
{% set sdk_year  = sdk_version[0] | int %}
{% set sdk_month = sdk_version[1] | int %}
{% set sdk_patch = sdk_version[2] | int %}
{% set sdk_build = sdk_version[3] | int %}

{% set cuda_compiler_version = cuda_compiler_version | default("None") %}
{% if "." in (cuda_compiler_version | string) %}
  {% set cuda_version = cuda_compiler_version.split(".") %}
  {% set cuda_major = cuda_version[0] | int %}
  {% set cuda_minor = cuda_version[1] | int %}
{% else %}
  {% set cuda_major = cuda_compiler_version | int %}
  {% set cuda_minor = 0 %}
{% endif %}


{% set build_num = 0 %}
# prioritize nompi variant via build number
{% set build_num_nompi_increment = 100 %}

# encode mpi dependency in the build string for cutensornet and cudensitymat
{% if mpi != "nompi" %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% set mpi_build_num = build_num %}
{% else %}
  {% set mpi_prefix = "nompi" %}
  {% set mpi_build_num = build_num_nompi_increment + build_num  %}
{% endif %}


{% if linux64 or aarch64 %}
  {% set kname = "linux" %}
  {% set march = "sbsa" %}    # [aarch64]
  {% set march = "x86_64" %}  # [linux64]

  {% set target_path = os.sep.join(["", "targets", "%s-%s" % (march, kname)]) %}
  {% set devzone_base = "https://developer.download.nvidia.com/compute" %}
  {% set devzone = "%s/%s/redist/%s/%s-%s" % (devzone_base, package, package, kname, march) %}
  
  {% set devzone = "%s/%s-%s-%s-%s_cuda%s-archive.tar.xz" % (devzone, package, kname, march, version, cuda_major) %}

  {% set github_base = "https://github.com/nvidia" %}
  {% set github = "%s/%s" % (github_base, package) %}
  {% set github = "%s/archive/refs/tags/v%s.tar.gz" % (github, ".".join(sdk_version[:3])) %}
{% endif %}

package:
  name: cuquantum-sdk
  version: {{ version }}

source:
  - url: {{ devzone }}  # [((cuda_compiler_version or "").startswith("12") or (cuda_compiler_version or "").startswith("13")) and (linux64 or aarch64)]
    sha256: fec8fcceeb9b62f2dff37834a9cd44c6ab05486dec0ebc5ae3452dd8d6390ea0  # [(cuda_compiler_version or "").startswith("12") and linux64]
    sha256: 3f1e706c0ee582341ec4f103d37c92d90ef16d1cfac42f502c44b2feb6861dd9  # [(cuda_compiler_version or "").startswith("13") and linux64]
    sha256: b63237e122a32f2576118297c291597815c9c3573daf5c9b4592ada7af13fc17  # [(cuda_compiler_version or "").startswith("12") and aarch64]
    sha256: 629d3e6749ac49e96de4469477d3b0172581896c7273890bc355420b344fac87  # [(cuda_compiler_version or "").startswith("13") and aarch64]

  - url: {{ github }}  # [linux64 or aarch64]
    sha256: 29cb623539f3a84bf9333aac0db03718aba242cefdbb527e81cf3f10f01d08e7  # [linux64 or aarch64]

build:
  number: {{ build_num }}
  skip: true  # [cuda_compiler_version in (None, "None")]
  skip: true  # [win]
  skip: true  # [osx]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}
    - {{ stdlib('c') }}

outputs:
  - name: cuquantum
    version: {{ version }}
    build:
      number: {{ build_num }}
    requirements:
      build:
      host:
      run:
        - {{ pin_subpackage("cudensitymat", max_pin="x.x.x") }}
        - {{ pin_subpackage("cutensornet", max_pin="x.x.x") }}
        - {{ pin_subpackage("custatevec", max_pin="x.x.x") }}
    test:
      commands:
        - echo "cuquantum metapackage {{ version }}"

  - name: cudensitymat
    version: {{ cudm_version }}
    build:
      missing_dso_whitelist:
        - "*libcutensornet*"  # it is a subpackage in this recipe referenced by this output
      number: {{ mpi_build_num }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_build_num }}"
      script: "${RECIPE_DIR}/cudensitymat/cudm-install"
      run_exports:
        - {{ pin_subpackage("cudensitymat", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports_from:
        - {{ compiler("cuda") }}
        - libcublas
        - libcusolver
        - libcurand
      post-link: post-link
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}  # [mpi == "openmpi"]
        - cf-nvidia-tools 1  # [linux]
      host:
        - cutensor >=2.3.1,<3
        - cuda-version {{ cuda_compiler_version }}
        - libcublas
        - libcusolver
        - libcurand
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cuda-version", max_pin="x", min_pin="x") }}
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
        - libcublas
        - libcusolver
        - libnvjitlink
        - libcurand
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}  # [mpi == "openmpi"]
      run_constrained:
        # if users also wanna install mpi, we need to ensure the nompi version is not
        # picked by the solver, we do so by createing a conflict
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        # avoid sysroot_linux exported by dependency causing it to fall back to baseline
        - {{ stdlib('c') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cudensitymat/*
      commands:
        - export mpi={{ mpi }}
        - ./cudensitymat/cudm-tests {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuDensityMat: A High-Performance Library for composing analog quantum dynamics equation solvers'
      description: |
        NVIDIA cuDensityMat is a high-performance library for composing analog quantum dynamics equation solvers. 
        cuDensityMat is a component of the NVIDIA cuQuantum SDK.
        In addition to C APIs, cuDensityMat can also be accessed in Python via cuQuantum Python.

        The packages cuquantum, cudensitymat, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/cudensitymat/
      dev_url: https://github.com/NVIDIA/cuQuantum
  
  - name: cutensornet
    version: {{ cutn_version }}
    build:
      number: {{ mpi_build_num }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_build_num }}"
      script: "${RECIPE_DIR}/cutensornet/cutn-install"
      run_exports:
        - {{ pin_subpackage("cutensornet", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports_from:
        - {{ compiler("cuda") }}
        - libcublas
        - libcusolver
      post-link: post-link
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
        - cf-nvidia-tools 1  # [linux]
      host:
        - cutensor >=2.3.1,<3
        - cuda-version {{ cuda_compiler_version }}
        - libcusolver
        - libcublas
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cuda-version", max_pin="x", min_pin="x") }}
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - libcublas
        - libcusolver
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
      run_constrained:
        # if users also want to install mpi, we need to ensure the nompi version is not
        # picked by the solver, we do so by creating a conflict
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - libcublas-dev
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        # avoid sysroot_linux exported by dependency causing it to fall back to baseline
        - {{ stdlib('c') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        ## seems unnecessary?
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cutensornet/*
      commands:
        - export mpi={{ mpi }}
        - ./cutensornet/cutn-tests {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuTensorNet: A High-Performance Library for Tensor Network Computations'
      description: |
        NVIDIA cuTensorNet is a high-performance library for tensor network computations.
        cuTensorNet is a component of the NVIDIA cuQuantum SDK.
        In addition to C APIs, cuTensorNet can also be accessed in Python via cuQuantum Python.

        The packages cuquantum, cudensitymat, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/cutensornet/
      dev_url: https://github.com/NVIDIA/cuQuantum
  
  - name: custatevec
    version: {{ cusv_version }}
    build:
      number: {{ build_num }}
      string: "h{{ PKG_HASH }}_{{ build_num }}"
      script: "${RECIPE_DIR}/custatevec/cusv-install"
      run_exports:
        - {{ pin_subpackage("custatevec", max_pin="x") }}
      ignore_run_exports_from:
        - {{ compiler("cuda") }}
        - libcublas
      post-link: post-link
      missing_dso_whitelist:
        - libnvidia-ml.so
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cf-nvidia-tools 1  # [linux]
      host:
        - cuda-version {{ cuda_compiler_version }}
        - cuda-nvml-dev
        - libcublas
      run:
        - {{ pin_compatible("cuda-version", max_pin="x", min_pin="x") }}
        - cuda-nvml-dev
        - libcublas
      run_constrained:
        - __cuda >=12
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        # avoid sysroot_linux exported by dependency causing it to fall back to baseline
        - {{ stdlib('c') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        ## seems unnecessary?
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./custatevec/*
      commands:
        - ./custatevec/cusv-tests {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuStateVec: A High-Performance Library for State Vector Quantum Simulators'
      description: |
        NVIDIA cuStateVec is a high-performance library dedicated to operations for building state vector quantum simulators.
        cuStateVec is a component of the NVIDIA cuQuantum SDK.
        In addition to C APIs, cuStateVec can also be accessed in Python via cuQuantum Python.
        
        The packages cuquantum, cudensitymat, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/custatevec/
      dev_url: https://github.com/NVIDIA/cuQuantum
  
  - name: cuquantum-python
    # cuquantum python version label is MAJOR.MINOR.PATCH
    version: {{ ".".join(sdk_version[:3]) }}
    build:
      number: {{ build_num }}
      skip: true  # [py<311 or py>313]
      # build cuQuantum Python package is CUDA agnostic, serving both CUDA 13/12
      # only build in the CUDA 12 pipeline
      # (note: this still uses cuda_compiler_version to calculate hash)
      skip: true  # [not (cuda_compiler_version or "").startswith("12")]
      skip: true  # [mpi != "nompi"]
      script: "${RECIPE_DIR}/cuquantum-python/cuquantum-python-install"
      ignore_run_exports_from:
        # let cuquantum handle the CUDA deps
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - libnvidia-ml.so
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
        - cython <4                           # [build_platform != target_platform]
      host:
        - python
        - pip
        - cython <4
        - cuquantum ={{ version }}
        - packaging
        - setuptools
      run:
        - python
        - numpy >=1.26
        - cupy >=13.0
        - {{ pin_compatible('nvmath-python', max_pin='x.x') }}
        - {{ pin_subpackage('custatevec', max_pin='x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
        - {{ pin_subpackage('cudensitymat', max_pin='x.x') }}
        # cuquantum subpackage dependencies should already be enforcing this constraint indirectly
      run_constrained:
        - __cuda >=12
        - pytorch >=1.10
        # mpi4py version constraint due to https://github.com/mpi4py/mpi4py/issues/609
        - mpi4py >=4.0.3
        # we don't have to pin Qiskit or Cirq here because their versions are fairly recent on conda-forge
    test:
      requires:
        - cuda-driver-dev
      files:
        - ./common/*
        - ./cuquantum-python/*
      commands:
        - ./cuquantum-python/cuquantum-python-tests
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: BSD-3-Clause
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html#nvidia-cuquantum-python
      license_file: LICENSE
      summary: "cuQuantum Python: A High-Performance Library for Accelerating Quantum Computing Simulations in Python"
      description: |
        NVIDIA cuQuantum Python provides Python bindings and high-level object-oriented
        models for accessing the full functionalities of NVIDIA cuQuantum SDK from Python.
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/python/
      dev_url: https://github.com/NVIDIA/cuQuantum

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
  license_file: LICENSE
  summary: 'cuQuantum SDK: A High-Performance Library for Accelerating Quantum Computing Simulations'
  description: |
    NVIDIA cuQuantum SDK is a set of high-performance libraries and tools for accelerating
    quantum computing simulations at both the circuit and device level by orders of magnitude. It consists of three major components:
    
    - cuDensityMat: a high-performance library for quantum dynamics equation solvers
    - cuStateVec: a high-performance library for state vector quantum simulators
    - cuTensorNet: a high-performance library for tensor network computations
    
    In addition to C APIs, cuQuantum also provides Python APIs via cuQuantum Python.
    
    The packages cuquantum, cudensitymat, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/index.html
  dev_url: https://github.com/NVIDIA/cuQuantum

extra:
  recipe-maintainers:
    - b-kloss
    - leofang
    - JeremyWangNVDA
    - mtjrider
    - yangcal
    - DmitryLyakh
