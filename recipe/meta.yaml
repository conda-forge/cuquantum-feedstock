{% set package = "cuquantum" %}
# Make sure the component versions are consistent with the SDK version!
{% set version = "24.08.0.5" %}
{% set cusv_version = "1.6.0" %}
{% set cutn_version = "2.5.0" %}

{% set sdk_version = version.split(".") %}
{% set sdk_year  = sdk_version[0] | int %}
{% set sdk_month = sdk_version[1] | int %}
{% set sdk_patch = sdk_version[2] | int %}
{% set sdk_build = sdk_version[3] | int %}

{% set cuda_compiler_version = cuda_compiler_version | default("None") %}
{% if "." in (cuda_compiler_version | string) %}
  {% set cuda_version = cuda_compiler_version.split(".") %}
  {% set cuda_major = cuda_version[0] | int %}
  {% set cuda_minor = cuda_version[1] | int %}
{% else %}
  {% set cuda_major = cuda_compiler_version | int %}
  {% set cuda_minor = 0 %}
{% endif %}

{% set build_num = sdk_build + 1 %}
# prioritize nompi variant via build number
{% set build_num_nompi_increment = 100 %}

# encode mpi dependency in the build string for cutensornet
{% if mpi != "nompi" %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% set mpi_build_num = build_num %}
{% else %}
  {% set mpi_prefix = "nompi" %}
  {% set mpi_build_num = build_num_nompi_increment + build_num  %}
{% endif %}


{% if linux64 or aarch64 or ppc64le %}
  {% set kname = "linux" %}
  {% set march = "sbsa" %}  # [aarch64]
  {% set march = "x86_64" %}  # [linux64]
  {% set march = "ppc64le" %}  # [ppc64le]
  
  {% set target_path = os.sep.join(["", "targets", "%s-%s" % (march, kname)]) %}
  {% set devzone_base = "https://developer.download.nvidia.com/compute" %}
  {% set devzone = "%s/%s/redist/%s/%s-%s" % (devzone_base, package, package, kname, march) %}
  
  {% set devzone = "%s/%s-%s-%s-%s_cuda%s-archive.tar.xz" % (devzone, package, kname, march, version, cuda_major) %}

  {% set github_base = "https://github.com/nvidia" %}
  {% set github = "%s/%s" % (github_base, package) %}
  {% set github = "%s/archive/refs/tags/v%s.tar.gz" % (github, ".".join(sdk_version[:3])) %}
{% endif %}

package:
  name: cuquantum-sdk
  version: {{ version }}

source:

  - url: {{ devzone }}  # [((cuda_compiler_version or "").startswith("11") or (cuda_compiler_version or "").startswith("12")) and (linux64 or aarch64 or ppc64le)]
    sha256: f361f2e45ff863e7eb152f1553580c3bcfb7c0a6b9efea909688fdc519fee4d1  # [(cuda_compiler_version or "").startswith("11") and linux64]
    sha256: 485968734706eeffcd3adc3b2d2086e59be7ff3ddd907e96f1eb97335beb344a  # [(cuda_compiler_version or "").startswith("12") and linux64]
    sha256: 4b695e25f8e2bfdaa04f68c379fe2001b6fdb8fe63169780b584f7b49acd0312  # [(cuda_compiler_version or "").startswith("11") and aarch64]
    sha256: 9ca173c8b58ac5c097a8c69f4900bc9ef0179def721804f1e9f033677445cafc  # [(cuda_compiler_version or "").startswith("12") and aarch64]
    sha256: 8767174f86211ca3610d91bdf8c6b8145408836a3d14808414297aef3631fd43  # [(cuda_compiler_version or "").startswith("11") and ppc64le]
    sha256: 06d63f5c3a7a3f3e910259c1bfca3e7fdab72d0378099002941bc0a743f35694  # [(cuda_compiler_version or "").startswith("12") and ppc64le]
    
  - url: {{ github }}  # [linux64 or aarch64 or ppc64le]
    sha256: 6e4a5ad168e8aaa422f338c2a273242d3c9aa22be081a4065f85d75b6eecda7a  # [linux64 or aarch64 or ppc64le]

build:
  number: {{ build_num }}
  skip: true  # [cuda_compiler_version in (None, "None")]
  skip: true  # [win]
  skip: true  # [osx]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}
    - {{ stdlib('c') }}

outputs:
  - name: cuquantum
    version: {{ version }}
    build:
      number: {{ build_num }}
    requirements:
      build:
      host:
      run:
        - {{ pin_subpackage("cutensornet", max_pin="x.x.x") }}
        - {{ pin_subpackage("custatevec", max_pin="x.x.x") }}
    test:
      commands:
        - echo "cuquantum metapackage {{ version }}"
  
  - name: cutensornet
    version: {{ cutn_version }}
    build:
      number: {{ mpi_build_num }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_build_num }}"
      script: "${RECIPE_DIR}/cutensornet/cutn-install"
      run_exports:
        - {{ pin_subpackage("cutensornet", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports_from:
        - {{ compiler("cuda") }}
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver  # [(cuda_compiler_version or "").startswith("12")]
      post-link: post-link
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
      host:
        - cutensor >=2.0.2,<3
        - cuda-version {{ cuda_compiler_version }}
        - libcusolver  # [(cuda_compiler_version or "").startswith("12")]
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cuda-version", max_pin="x", min_pin="x") }}
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver  # [(cuda_compiler_version or "").startswith("12")]
        - cudatoolkit  # [(cuda_compiler_version or "").startswith("11")]
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
      run_constrained:
        # if users also wanna install mpi, we need to ensure the nompi version is not
        # picked by the solver, we do so by createing a conflict
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        # avoid sysroot_linux exported by dependency causing it to fall back to baseline
        - {{ stdlib('c') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        ## seems unnecessary?
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cutensornet/*
      commands:
        - export mpi={{ mpi }}
        #- export mpi="nompi"    # [mpi == "nompi"]
        #- export mpi="mpich"    # [mpi == "mpich"]
        #- export mpi="openmpi"  # [mpi == "openmpi"]
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./cutensornet/cutn-tests {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuTensorNet: A High-Performance Library for Tensor Network Computations'
      description: |
        NVIDIA cuTensorNet is a high-performance GPU library for tensor network computations,
        a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/cutensornet/
      dev_url: https://github.com/NVIDIA/cuQuantum
  
  - name: custatevec
    version: {{ cusv_version }}
    build:
      number: {{ build_num }}
      string: "h{{ PKG_HASH }}_{{ build_num }}"
      script: "${RECIPE_DIR}/custatevec/cusv-install"
      run_exports:
        - {{ pin_subpackage("custatevec", max_pin="x") }}
      ignore_run_exports_from:
        - {{ compiler("cuda") }}
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
      post-link: post-link
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cuda-version {{ cuda_compiler_version }}
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
      run:
        - {{ pin_compatible("cuda-version", max_pin="x", min_pin="x") }}  
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
        - cudatoolkit  # [(cuda_compiler_version or "").startswith("11")]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        # avoid sysroot_linux exported by dependency causing it to fall back to baseline
        - {{ stdlib('c') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        ## seems unnecessary?
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./custatevec/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./custatevec/cusv-tests {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuStateVec: A High-Performance Library for State Vector Quantum Simulators'
      description: |
        NVIDIA cuStateVec is a high-performance GPU library dedicated to operations with state vectors
        for expressing quantum algorithms. cuStateVec is a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/custatevec/
      dev_url: https://github.com/NVIDIA/cuQuantum
  
  - name: cuquantum-python
    # cuquantum python version label is MAJOR.MINOR.PATCH
    version: {{ ".".join(sdk_version[:3]) }}
    build:
      number: {{ build_num }}
      skip: true  # [py<310 or py>312]
      # build cuQuantum Python package is CUDA agnostic, serving both CUDA 11/12
      # only build in the CUDA 11 pipeline
      # (note: this still uses cuda_compiler_version to calculate hash)
      skip: true  # [not (cuda_compiler_version or "").startswith("11")]
      skip: true  # [mpi != "nompi"]
      script: "${RECIPE_DIR}/cuquantum-python/cuquantum-python-install"
      ignore_run_exports_from:
        # let cuquantum handle the CUDA deps
        - {{ compiler('cuda') }}
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
        - cython <3                           # [build_platform != target_platform]
      host:
        - python
        - pip
        - cython <3
        - cuquantum ={{ version }}
        - packaging
        - setuptools
      run:
        - python
        - numpy  >=1.21,<2
        - cupy   >=13.0
        - {{ pin_subpackage('custatevec', max_pin='x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
        # cuquantum subpackage dependencies should already be enforcing this constraint indirectly
        - cuda-version >=11.0.*,<13.a0
      run_constrained:
        - pytorch >=1.10
        - mpi4py >=3.1.0
        # we don't have to pin Qiskit or Cirq here because their versions are fairly recent on conda-forge
    test:
      requires:
        - cuda-driver-dev  # [linux and (cuda_compiler_version or "").startswith("12")]
      files:
        - ./common/*
        - ./cuquantum-python/*
      commands:
        - ./cuquantum-python/cuquantum-python-tests
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: BSD-3-Clause
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html#nvidia-cuquantum-python
      license_file: LICENSE
      summary: "cuQuantum Python: Python APIs for NVIDIA cuQuantum SDK"
      description: |
        NVIDIA cuQuantum Python provides Python bindings and high-level object-oriented
        models for accessing the full functionalities of NVIDIA cuQuantum SDK from Python.
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/python/
      dev_url: https://github.com/NVIDIA/cuQuantum

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
  license_file: LICENSE
  summary: "cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science"
  description: |
    NVIDIA cuQuantum is an SDK of optimized libraries and tools for accelerating quantum computing workflows.
    Using NVIDIA GPU Tensor Core GPUs, developers can use cuQuantum to speed up quantum circuit simulations
    based on state vector and tensor network methods by orders of magnitude. Two major components of the
    SDK are

      - cuStateVec: a high-performance library for state vector computations
      - cuTensorNet: a high-performance library for tensor network computations

    The packages cuquantum, custatevec and cutensornet are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/index.html
  dev_url: https://github.com/NVIDIA/cuQuantum

extra:
  recipe-maintainers:
    - b-kloss
    - leofang
    - JeremyWangNVDA
    - mtjrider
    - yangcal
    - DmitryLyakh
